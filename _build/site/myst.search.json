{"version":"1","records":[{"hierarchy":{"lvl1":"单细胞 ATAC 和 RNA 图谱注释"},"type":"lvl1","url":"/assmbly-singlecell-atlas","position":0},{"hierarchy":{"lvl1":"单细胞 ATAC 和 RNA 图谱注释"},"content":"","type":"content","url":"/assmbly-singlecell-atlas","position":1},{"hierarchy":{"lvl1":"单细胞 ATAC 和 RNA 图谱注释"},"type":"lvl1","url":"/assmbly-singlecell-atlas#id-atac-rna","position":2},{"hierarchy":{"lvl1":"单细胞 ATAC 和 RNA 图谱注释"},"content":"\n\n","type":"content","url":"/assmbly-singlecell-atlas#id-atac-rna","position":3},{"hierarchy":{"lvl1":"单细胞 ATAC 和 RNA 图谱注释","lvl2":"工具包加载"},"type":"lvl2","url":"/assmbly-singlecell-atlas#id","position":4},{"hierarchy":{"lvl1":"单细胞 ATAC 和 RNA 图谱注释","lvl2":"工具包加载"},"content":"\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scanpy as sc\nimport anndata as ad\nimport os\nimport joblib\nimport importlib\nfrom typing import Optional, Tuple, Union\nfrom scipy.sparse import csr_matrix\nfrom scipy.cluster.hierarchy import linkage, dendrogram, leaves_list\nfrom scipy.spatial.distance import pdist\nimport snapatac2 as snap\n\n","type":"content","url":"/assmbly-singlecell-atlas#id","position":5},{"hierarchy":{"lvl1":"单细胞 ATAC 和 RNA 图谱注释","lvl2":"数据读取"},"type":"lvl2","url":"/assmbly-singlecell-atlas#id-1","position":6},{"hierarchy":{"lvl1":"单细胞 ATAC 和 RNA 图谱注释","lvl2":"数据读取"},"content":"\n\nrna_adata = ad.read_h5ad(\"/data/wzy_data/IntegrAnal_scATAC_scRNA_sql/athMD/data/intermediate/scglue/rna_harmony_adata.h5ad\")\nrna_ctrl_adata = ad.read_h5ad(\"/data/wzy_data/IntegrAnal_scATAC_scRNA_sql/athMD/data/intermediate/scglue/rna_ctrl_adata.h5ad\")\nrna_treat_adata = ad.read_h5ad(\"/data/wzy_data/IntegrAnal_scATAC_scRNA_sql/athMD/data/intermediate/scglue/rna_treat_adata.h5ad\")\n\natac_adata = ad.read_h5ad(\"/data/wzy_data/IntegrAnal_scATAC_scRNA_sql/athMD/data/intermediate/scglue/atac_harmony_adata.h5ad\")\natac_gene_mat_adata = ad.read_h5ad(\"/data/wzy_data/IntegrAnal_scATAC_scRNA_sql/athMD/data/intermediate/scglue/atac_harmony_gene_matrix.h5ad\")\natac_peak_mat_adata = ad.read_h5ad(\"/data/wzy_data/IntegrAnal_scATAC_scRNA_sql/athMD/data/intermediate/scglue/atac_harmony_peak_mat.h5ad\")\natac_ctrl_adata = ad.read_h5ad(\"/data/wzy_data/IntegrAnal_scATAC_scRNA_sql/athMD/data/intermediate/scglue/atac_ctrl_adata.h5ad\")\natac_treat_adata = ad.read_h5ad(\"/data/wzy_data/IntegrAnal_scATAC_scRNA_sql/athMD/data/intermediate/scglue/atac_treat_adata.h5ad\")\n\nscglue_adata = ad.read_h5ad(\"/data/wzy_data/IntegrAnal_scATAC_scRNA_sql/pipeline_py/data/scglue/scglue_combined.h5ad\")\n\n","type":"content","url":"/assmbly-singlecell-atlas#id-1","position":7},{"hierarchy":{"lvl1":"单细胞 ATAC 和 RNA 图谱注释","lvl2":"数据预处理"},"type":"lvl2","url":"/assmbly-singlecell-atlas#id-2","position":8},{"hierarchy":{"lvl1":"单细胞 ATAC 和 RNA 图谱注释","lvl2":"数据预处理"},"content":"\n\n处理 barcodes 标签避免重复：\n\nrna_adata.obs.index = \"scRNAseq_\" + rna_adata.obs.index.astype(str)\natac_gene_mat_adata.obs.index = \"snATACseq_\" + atac_gene_mat_adata.obs.index.astype(str)\nscglue_adata.obs.index = scglue_adata.obs.index.str.replace(\"RNA_\", \"scRNAseq_\").str.replace(\"ATAC_\", \"snATACseq_\")\n\n传递细胞类型注释：\n\nrna_adata.obs[\"cell_type_scglue\"] = rna_adata.obs.index.map(scglue_adata.obs[\"cell_type_v2\"].to_dict())\natac_gene_mat_adata.obs[\"cell_type_scglue\"] = atac_gene_mat_adata.obs.index.map(scglue_adata.obs[\"cell_type_v2\"].to_dict())\n\n计算单细胞数据质量：\n\nrna_ctrl_adata.obs[\"pct_counts_organelle\"] = rna_ctrl_adata.obs[\"pct_counts_mt\"] + rna_ctrl_adata.obs[\"pct_counts_cp\"]\nrna_treat_adata.obs[\"pct_counts_organelle\"] = rna_treat_adata.obs[\"pct_counts_mt\"] + rna_treat_adata.obs[\"pct_counts_cp\"]\n\n计算 ATAC 中的 FRiP：\n\nsnap.metrics.frip(\n\tadata=atac_ctrl_adata,\n\tregions={\"Peaks\": atac_peak_mat_adata.var_names.to_series().to_list()},\n\tnormalized=True,\n\tcount_as_insertion=False,\n\tinplace=True,\n\tn_jobs=20\n)\n\nsnap.metrics.frip(\n\tadata=atac_treat_adata,\n\tregions={\"Peaks\": atac_peak_mat_adata.var_names.to_series().to_list()},\n\tnormalized=True,\n\tcount_as_insertion=False,\n\tinplace=True,\n\tn_jobs=20\n)\n\n","type":"content","url":"/assmbly-singlecell-atlas#id-2","position":9},{"hierarchy":{"lvl1":"单细胞 ATAC 和 RNA 图谱注释","lvl2":"RNA 聚类 UMAP 图"},"type":"lvl2","url":"/assmbly-singlecell-atlas#rna-umap","position":10},{"hierarchy":{"lvl1":"单细胞 ATAC 和 RNA 图谱注释","lvl2":"RNA 聚类 UMAP 图"},"content":"\n\nfig, axes = plt.subplots(3, 2, figsize=(11, 15))\n\nsc.pl.embedding(\n    rna_ctrl_adata,\n    basis=\"X_umap\",\n    color=\"leiden\",\n    use_raw=None,\n    layer=None,\n    legend_loc=\"on data\",\n    title=\"scRNA-seq | WT 0 min\",\n    size=20,\n    ax=axes[0, 0],\n    show=False\n)\n\nsc.pl.embedding(\n    rna_treat_adata,\n    basis=\"X_umap\",\n    color=\"leiden\",\n    use_raw=None,\n    layer=None,\n    legend_loc=\"on data\",\n    title=\"scRNA-seq | WT 5 min\",\n    size=20,\n    ax=axes[0, 1],\n    show=False\n)\n\nsc.pl.embedding(\n    rna_adata,\n    basis=\"X_umap_before_harmony\",\n    color=\"Dataset\",\n    use_raw=None,\n    layer=None,\n    legend_loc=None,\n    title=\"scRNA-seq | Before Harmony\",\n    size=20,\n    ax=axes[1, 0],\n    show=False\n)\n\nsc.pl.embedding(\n    rna_adata,\n    basis=\"X_umap_harmony\",\n    color=\"Dataset\",\n    use_raw=None,\n    layer=None,\n    legend_loc=None,\n    title=\"scRNA-seq | After Harmony\",\n    size=20,\n    ax=axes[1, 1],\n    show=False\n)\n\nsc.pl.embedding(\n    rna_adata[rna_adata.obs[\"Dataset\"] == \"CTRL\"],\n    basis=\"X_umap_harmony\",\n    color=\"Dataset\",\n    use_raw=None,\n    layer=None,\n    legend_loc=None,\n    title=\"scRNA-seq | WT 0 min\",\n    size=20,\n    ax=axes[2, 0],\n    show=False\n)\n\nsc.pl.embedding(\n    rna_adata[rna_adata.obs[\"Dataset\"] == \"TREAT\"],\n    basis=\"X_umap_harmony\",\n    color=\"Dataset\",\n    use_raw=None,\n    layer=None,\n    legend_loc=None,\n    title=\"scRNA-seq | WT 5 min\",\n    size=20,\n    ax=axes[2, 1],\n    show=False\n)\n\naxes[0, 0].set_xlabel(\"\")\naxes[0, 0].set_ylabel(\"\")\naxes[0, 1].set_xlabel(\"\")\naxes[0, 1].set_ylabel(\"\")\naxes[1, 0].set_xlabel(\"\")\naxes[1, 0].set_ylabel(\"\")\naxes[1, 1].set_xlabel(\"\")\naxes[1, 1].set_ylabel(\"\")\naxes[2, 0].set_xlabel(\"\")\naxes[2, 0].set_ylabel(\"\")\naxes[2, 1].set_xlabel(\"\")\naxes[2, 1].set_ylabel(\"\")\n\nplt.tight_layout()\nplt.show()\n\n","type":"content","url":"/assmbly-singlecell-atlas#rna-umap","position":11},{"hierarchy":{"lvl1":"单细胞 ATAC 和 RNA 图谱注释","lvl2":"Marker 基因表达模式图"},"type":"lvl2","url":"/assmbly-singlecell-atlas#marker","position":12},{"hierarchy":{"lvl1":"单细胞 ATAC 和 RNA 图谱注释","lvl2":"Marker 基因表达模式图"},"content":"\n\nmarkers_lst = [\n    \"AT3G01670\", \"AT3G01680\", \"AT3G03270\", # Sieve Element\n    \"AT1G44110\", \"AT1G76540\", \"AT3G25980\", \"AT4G31840\", # Cell Cycle\n    \"AT2G47260\", \"AT5G25980\", # Myrosin Idioblast\n    \"AT1G25230\", \"AT5G41920\", \"AT4G13770\", # Bundle Sheath\n    \"AT3G11930\", \"AT3G48740\", \"AT5G24800\", # Phloem Parenchyma\n    \"AT3G10080\", \"AT5G19530\", \"AT5G46730\", \"AT5G60490\", \"AT5G61660\", # Xylem\n    \"AT1G22710\", \"AT4G19840\", \"AT5G18600\", # Companion Cell\n    \"AT4G21750\", \"AT5G63180\", # Epidermis\n    \"AT1G46480\", \"AT2G39700\", # Cambium\n    \"AT5G57130\", # Phloem\n    \"AT1G34245\", \"AT3G06120\", # Meristemoids\n    \"AT1G04800\", \"AT1G08810\", \"AT3G24140\", # Guard Cell\n    \"AT1G13650\", \"AT4G12970\", # Mesophyll\n]\n\nsc.pl.DotPlot(\n\tadata=rna_adata,\n\tvar_names=markers_lst,\n\tgroupby=\"leiden_res_1.2\",\n\tuse_raw=True,\n\tlog=False,\n\tfigsize=(20,8),\n\tgene_symbols=None,\n\tvar_group_positions=[(0,2), (3,6), (7,8), (9,11), (12,14), (15,19), (20,22), (23,24), (25,26), (27,27), (28,29), (30,32), (33,34)],\n\tvar_group_labels=[\"Sieve Element\", \"Cell Cycle\", \"Myrosin Idioblast\", \"Bundle Sheath\", \"Phloem Parenchyma\", \"Xylem\", \"Companion Cell\", \"Epidermis\", \"Cambium\", \"Phloem\", \"Meristemoids\", \"Guard Cell\", \"Mesophyll\"],\n\tvar_group_rotation=None,\n\tlayer=None,\n\ttitle=None,\n\texpression_cutoff=0.0,\n\tmean_only_expressed=False,\n\tstandard_scale=None,\n\tcmap=\"viridis\"\n).add_dendrogram().show()\n\n","type":"content","url":"/assmbly-singlecell-atlas#marker","position":13},{"hierarchy":{"lvl1":"单细胞 ATAC 和 RNA 图谱注释","lvl2":"RNA 注释 UMAP 图"},"type":"lvl2","url":"/assmbly-singlecell-atlas#rna-umap-1","position":14},{"hierarchy":{"lvl1":"单细胞 ATAC 和 RNA 图谱注释","lvl2":"RNA 注释 UMAP 图"},"content":"\n\nfig, ax = plt.subplots(figsize=(6, 5))\n\nsc.pl.embedding(\n    adata=rna_adata,\n    basis=\"X_umap_harmony\",\n    color=\"cell_type_v2\",\n    palette=sc.pl.palettes.vega_20,\n    use_raw=None,\n    layer=None,\n    legend_loc=\"right margin\",\n    title=\"scRNA-seq\",\n    size=20,\n    ax=ax,\n    show=False\n)\n\nax.set_xlabel(\"\")\nax.set_ylabel(\"\")\n\nplt.show()\n\n","type":"content","url":"/assmbly-singlecell-atlas#rna-umap-1","position":15},{"hierarchy":{"lvl1":"单细胞 ATAC 和 RNA 图谱注释","lvl2":"ATAC 聚类 UMAP 图"},"type":"lvl2","url":"/assmbly-singlecell-atlas#atac-umap","position":16},{"hierarchy":{"lvl1":"单细胞 ATAC 和 RNA 图谱注释","lvl2":"ATAC 聚类 UMAP 图"},"content":"\n\nfig, axes = plt.subplots(3, 2, figsize=(11, 15))\n\nsc.pl.embedding(\n    atac_ctrl_adata,\n    basis=\"X_umap\",\n    color=\"leiden\",\n    use_raw=None,\n    layer=None,\n    legend_loc=\"on data\",\n    title=\"snATAC-seq | WT 0 min\",\n    size=20,\n    ax=axes[0, 0],\n    show=False\n)\n\nsc.pl.embedding(\n    atac_treat_adata,\n    basis=\"X_umap\",\n    color=\"leiden\",\n    use_raw=None,\n    layer=None,\n    legend_loc=\"on data\",\n    title=\"snATAC-seq | WT 5 min\",\n    size=20,\n    ax=axes[0, 1],\n    show=False\n)\n\nsc.pl.embedding(\n    atac_adata,\n    basis=\"X_umap\",\n    color=\"Dataset\",\n    use_raw=None,\n    layer=None,\n    legend_loc=None,\n    title=\"snATAC-seq | Before Harmony\",\n    size=20,\n    ax=axes[1, 0],\n    show=False\n)\n\nsc.pl.embedding(\n    atac_adata,\n    basis=\"X_umap_harmony\",\n    color=\"Dataset\",\n    use_raw=None,\n    layer=None,\n    legend_loc=None,\n    title=\"snATAC-seq | After Harmony\",\n    size=20,\n    ax=axes[1, 1],\n    show=False\n)\n\nsc.pl.embedding(\n    atac_adata[atac_adata.obs[\"Dataset\"] == \"CTRL\"],\n    basis=\"X_umap_harmony\",\n    color=\"Dataset\",\n    use_raw=None,\n    layer=None,\n    legend_loc=None,\n    title=\"snATAC-seq | WT 0 min\",\n    size=20,\n    ax=axes[2, 0],\n    show=False\n)\n\nsc.pl.embedding(\n    atac_adata[atac_adata.obs[\"Dataset\"] == \"TREAT\"],\n    basis=\"X_umap_harmony\",\n    color=\"Dataset\",\n    use_raw=None,\n    layer=None,\n    legend_loc=None,\n    title=\"snATAC-seq | WT 5 min\",\n    size=20,\n    ax=axes[2, 1],\n    show=False\n)\n\naxes[0, 0].set_xlabel(\"\")\naxes[0, 0].set_ylabel(\"\")\naxes[0, 1].set_xlabel(\"\")\naxes[0, 1].set_ylabel(\"\")\naxes[1, 0].set_xlabel(\"\")\naxes[1, 0].set_ylabel(\"\")\naxes[1, 1].set_xlabel(\"\")\naxes[1, 1].set_ylabel(\"\")\naxes[2, 0].set_xlabel(\"\")\naxes[2, 0].set_ylabel(\"\")\naxes[2, 1].set_xlabel(\"\")\naxes[2, 1].set_ylabel(\"\")\n\nplt.tight_layout()\nplt.show()\n\n","type":"content","url":"/assmbly-singlecell-atlas#atac-umap","position":17},{"hierarchy":{"lvl1":"单细胞 ATAC 和 RNA 图谱注释","lvl2":"GLUE 整合 UMAP 图"},"type":"lvl2","url":"/assmbly-singlecell-atlas#glue-umap","position":18},{"hierarchy":{"lvl1":"单细胞 ATAC 和 RNA 图谱注释","lvl2":"GLUE 整合 UMAP 图"},"content":"\n\nfig, axes = plt.subplots(2, 2, figsize=(12, 10))\n\nsc.pl.embedding(\n\tscglue_adata,\n\tbasis=\"X_umap\",\n\tcolor=\"dataset\",\n\tuse_raw=None,\n\tlayer=None,\n\tlegend_loc=None,\n\ttitle=\"scglue | integrated\",\n\tsize=20,\n\tax=axes[0, 0],\n\tshow=False\n)\n\nsc.pl.embedding(\n\tscglue_adata,\n\tbasis=\"X_umap\",\n\tcolor=\"cell_type_v2\",\n\tuse_raw=None,\n\tlayer=None,\n\tpalette=sc.pl.palettes.vega_20,\n\tlegend_loc=\"right margin\",\n\ttitle=\"scglue | integrated\",\n\tsize=20,\n\tax=axes[0, 1],\n\tshow=False\n)\n\nsc.pl.embedding(\n\tscglue_adata[scglue_adata.obs[\"dataset\"] == \"ATAC\"],\n\tbasis=\"X_umap\",\n\tcolor=\"dataset\",\n\tuse_raw=None,\n\tlayer=None,\n\tlegend_loc=None,\n\ttitle=\"scglue | snATAC-seq\",\n\tsize=20,\n\tax=axes[1, 0],\n\tshow=False\n)\n\nsc.pl.embedding(\n\tscglue_adata[scglue_adata.obs[\"dataset\"] == \"RNA\"],\n\tbasis=\"X_umap\",\n\tcolor=\"dataset\",\n\tuse_raw=None,\n\tlayer=None,\n\tlegend_loc=None,\n\ttitle=\"scglue | scRNA-seq\",\n\tsize=20,\n\tax=axes[1, 1],\n\tshow=False\n)\n\nplt.tight_layout()\nplt.show()\n\n","type":"content","url":"/assmbly-singlecell-atlas#glue-umap","position":19},{"hierarchy":{"lvl1":"单细胞 ATAC 和 RNA 图谱注释","lvl2":"ATAC & RNA marker 表达模式图"},"type":"lvl2","url":"/assmbly-singlecell-atlas#atac-rna-marker","position":20},{"hierarchy":{"lvl1":"单细胞 ATAC 和 RNA 图谱注释","lvl2":"ATAC & RNA marker 表达模式图"},"content":"\n\ndef _plot_multiome_patterns(\n    rna_adata: ad.AnnData,\n    atac_adata: ad.AnnData,\n    rna_layer: Optional[str] = None,\n    atac_layer: Optional[str] = None,\n    cluster_label: str = None,\n    cluster_order: Optional[list] = None,\n    gene_lst: Optional[list] = None,\n    output_path: Optional[str] = None\n) -> None:\n    \"\"\"\n    This function visualizes the gene expression (RNA-seq) and ATAC-seq patterns across cell types.\n    It outputs a heatmap for RNA and ATAC data in common and separate hierarchical orders.\n\n    Args:\n        rna_adata (ad.AnnData): AnnData object containing RNA-seq data.\n        atac_adata (ad.AnnData): AnnData object containing ATAC-seq data.\n        rna_layer (str, optional): The RNA-seq layer to use (default is None, which uses the main matrix).\n        atac_layer (str, optional): The ATAC-seq layer to use (default is None, which uses the main matrix).\n        cluster_label (str): The column name in .obs of the AnnData object that specifies the cell type (default is None).\n        cluster_order (list, optional): The order of cell types to display (default is None).\n        gene_lst (list, optional): Gene list to display (default is None).\n        output_path (str, optional): Path to save the output figure (default is None, which means no saving).\n\n    Returns:\n        None\n    \"\"\"\n    # Process RNA-seq data\n    if cluster_order:\n        rna_adata = rna_adata[rna_adata.obs[cluster_label].isin(cluster_order)]\n\n    rna_data = rna_adata.X if isinstance(\n        rna_adata.X, np.ndarray) else rna_adata.X.toarray()\n    if rna_layer:\n        rna_data = rna_adata.layers[rna_layer] if isinstance(\n            rna_adata.layers[rna_layer], np.ndarray) else rna_adata.layers[rna_layer].toarray()\n\n    rna_data = pd.DataFrame(rna_data)\n    rna_data.index = rna_adata.obs.index\n    rna_data.columns = rna_adata.var.index\n    rna_data[\"cell_type\"] = rna_adata.obs[cluster_label]\n\n    # Convert to sparse matrix before groupby mean calculation\n    rna_sparse_data = csr_matrix(rna_data.drop(columns=[\"cell_type\"]).values)\n    rna_sparse_df = pd.DataFrame.sparse.from_spmatrix(rna_sparse_data)\n    rna_sparse_df.index = rna_data.index\n    rna_sparse_df.columns = rna_data.drop(columns=[\"cell_type\"]).columns\n\n    # Group by cell_type and calculate the mean (will remain sparse)\n    rna_grouped = rna_sparse_df.groupby(rna_data[\"cell_type\"]).mean()\n\n    # Convert back to dense matrix after groupby\n    rna_data = rna_grouped.T.sparse.to_dense()\n\n    # Normalize RNA data\n    rna_data = rna_data.apply(lambda x: (\n        x - x.min()) / (x.max() - x.min()) if x.max() != x.min() else x, axis=1).fillna(0)\n    if cluster_order:\n        rna_data = rna_data[cluster_order]\n\n    # Process ATAC-seq data\n    if cluster_order:\n        atac_adata = atac_adata[atac_adata.obs[cluster_label].isin(\n            cluster_order)]\n\n    atac_data = atac_adata.X if isinstance(\n        atac_adata.X, np.ndarray) else atac_adata.X.toarray()\n    if atac_layer:\n        atac_data = atac_adata.layers[atac_layer] if isinstance(\n            atac_adata.layers[atac_layer], np.ndarray) else atac_adata.layers[atac_layer].toarray()\n\n    atac_data = pd.DataFrame(atac_data)\n    atac_data.index = atac_adata.obs.index\n    atac_data.columns = atac_adata.var.index\n    atac_data[\"cell_type\"] = atac_adata.obs[cluster_label]\n\n    # Convert to sparse matrix before groupby mean calculation\n    atac_sparse_data = csr_matrix(atac_data.drop(columns=[\"cell_type\"]).values)\n    atac_sparse_df = pd.DataFrame.sparse.from_spmatrix(atac_sparse_data)\n    atac_sparse_df.index = atac_data.index\n    atac_sparse_df.columns = atac_data.drop(columns=[\"cell_type\"]).columns\n\n    # Group by cell_type and calculate the mean (will remain sparse)\n    atac_grouped = atac_sparse_df.groupby(atac_data[\"cell_type\"]).mean()\n\n    # Convert back to dense matrix after groupby\n    atac_data = atac_grouped.T.sparse.to_dense()\n\n    # Normalize ATAC data\n    atac_data = atac_data.apply(lambda x: (\n        x - x.min()) / (x.max() - x.min()) if x.max() != x.min() else x, axis=1).fillna(0)\n    if cluster_order:\n        atac_data = atac_data[cluster_order]\n\n    # Hierarchical clustering on RNA-seq data\n    rna_distances = pdist(rna_data, metric='euclidean')\n    rna_linkage = linkage(rna_distances, method='average')\n    rna_order = leaves_list(rna_linkage)\n    rna_data = rna_data.iloc[rna_order, :]\n\n    # Hierarchical clustering on ATAC-seq data\n    atac_data_common = atac_data.reindex(rna_data.index).dropna()\n    atac_distances = pdist(atac_data_common, metric='euclidean')\n    atac_linkage = linkage(atac_distances, method='average')\n    atac_order = leaves_list(atac_linkage)\n    atac_data_separated = atac_data_common.iloc[atac_order, :]\n\n    if gene_lst:\n        rna_data = rna_data.loc[gene_lst]\n        atac_data = atac_data_separated.loc[gene_lst]\n\n        # Plot the results\n        fig, axes = plt.subplots(1, 2, figsize=(18, 8))\n\n        # Plot RNA heatmap\n        ax = axes[0]\n        im = ax.imshow(rna_data, cmap=\"coolwarm\", aspect=\"auto\")\n        ax.set_title(\"scRNA-seq\")\n     \n        fig.colorbar(im, ax=ax)\n\n        # Set x-axis labels and rotate them\n        ax.set_xticks(range(rna_data.shape[1]))  # Set x-ticks positions\n        ax.set_xticklabels(rna_data.columns, rotation=90)\n        \n        ax.set_yticks(range(len(gene_lst)))\n        ax.set_yticklabels(gene_lst)\n\n        # Plot ATAC heatmap (common order)\n        ax = axes[1]\n        im = ax.imshow(atac_data, cmap=\"coolwarm\", aspect=\"auto\")\n        ax.set_title(\"snATAC-seq\")\n        \n        fig.colorbar(im, ax=ax)\n\n        # Set x-axis labels and rotate them\n        ax.set_xticks(range(atac_data.shape[1]))  # Set x-ticks positions\n        ax.set_xticklabels(rna_data.columns, rotation=90)\n\n        ax.set_yticks(range(len(gene_lst)))\n        ax.set_yticklabels(gene_lst)\n\n        plt.tight_layout()\n\n        # Save the figure if output_path is provided\n        if output_path:\n            plt.savefig(output_path)\n\n        plt.show()\n\n    else:\n        # Plot the results\n        fig, axes = plt.subplots(2, 2, figsize=(18, 16))\n\n        # Plot RNA heatmap\n        ax = axes[0, 0]\n        im = ax.imshow(rna_data, cmap=\"coolwarm\", aspect=\"auto\")\n        \n        ax.set_title(\"scRNA-seq\")\n        \n        fig.colorbar(im, ax=ax, label=\"Normalized Expression\")\n\n        # Set x-axis labels and rotate them\n        ax.set_xticks(range(rna_data.shape[1]))  # Set x-ticks positions\n        ax.set_xticklabels(rna_data.columns, rotation=90)\n\n        # Plot ATAC heatmap (common order)\n        ax = axes[0, 1]\n        im = ax.imshow(atac_data_common, cmap=\"coolwarm\", aspect=\"auto\")\n        \n        ax.set_title(\"snATAC-seq\")\n        \n        fig.colorbar(im, ax=ax, label=\"Normalized Expression\")\n\n        # Set x-axis labels and rotate them\n        # Set x-ticks positions\n        ax.set_xticks(range(atac_data_common.shape[1]))\n        ax.set_xticklabels(atac_data_common.columns, rotation=90)\n\n        # Plot RNA heatmap again\n        ax = axes[1, 0]\n        im = ax.imshow(rna_data, cmap=\"coolwarm\", aspect=\"auto\")\n        \n        ax.set_title(\"scRNA-seq\")\n        \n        fig.colorbar(im, ax=ax, label=\"Normalized Expression\")\n\n        # Set x-axis labels and rotate them\n        ax.set_xticks(range(rna_data.shape[1]))  # Set x-ticks positions\n        ax.set_xticklabels(rna_data.columns, rotation=90)\n\n        # Plot ATAC heatmap (separate order)\n        ax = axes[1, 1]\n        im = ax.imshow(atac_data_separated, cmap=\"coolwarm\", aspect=\"auto\")\n        \n        ax.set_title(\"snATAC-seq\")\n        \n        fig.colorbar(im, ax=ax, label=\"Normalized Expression\")\n\n        # Set x-axis labels and rotate them\n        # Set x-ticks positions\n        ax.set_xticks(range(atac_data_separated.shape[1]))\n        ax.set_xticklabels(atac_data_separated.columns, rotation=90)\n\n        plt.tight_layout()\n\n        # Save the figure if output_path is provided\n        if output_path:\n            plt.savefig(output_path)\n\n        plt.show()\n\nmarkers_lst = [\n    \"AT3G01670\", \"AT3G01680\", \"AT3G03270\", # Sieve Element\n    \"AT1G44110\", \"AT1G76540\", \"AT3G25980\", \"AT4G31840\", # Cell Cycle\n    \"AT2G47260\", \"AT5G25980\", # Myrosin Idioblast\n    \"AT1G25230\", \"AT5G41920\", \"AT4G13770\", # Bundle Sheath\n    \"AT3G11930\", \"AT3G48740\", \"AT5G24800\", # Phloem Parenchyma\n    \"AT3G10080\", \"AT5G19530\", \"AT5G46730\", \"AT5G60490\", \"AT5G61660\", # Xylem\n    \"AT1G22710\", \"AT4G19840\", \"AT5G18600\", # Companion Cell\n    \"AT4G21750\", \"AT5G63180\", # Epidermis\n    \"AT1G46480\", \"AT2G39700\", # Cambium\n    \"AT5G57130\", # Phloem\n    \"AT1G34245\", \"AT3G06120\", # Meristemoids\n    \"AT1G04800\", \"AT1G08810\", \"AT3G24140\", # Guard Cell\n    \"AT1G13650\", \"AT4G12970\", # Mesophyll\n]\n\ncell_type_order = [\"Sieve Element\", \"Cell Cycle\", \"Myrosin idioblast\", \"Bundle Sheath\", \"Phloem Parenchyma\", \"Xylem\", \"Companion Cell\", \"Epidermis\", \"Cambium\", \"Phloem\", \"Meristemoids\", \"Guard Cell\", \"Mesophyll\"]\n\n_plot_multiome_patterns(\n    rna_adata=rna_adata, \n    atac_adata=atac_gene_mat_adata, \n    rna_layer=\"counts\", \n    atac_layer=None, \n    cluster_label=\"cell_type_scglue\", \n    cluster_order=cell_type_order,\n    gene_lst=markers_lst,\n    output_path=None\n)\n\n","type":"content","url":"/assmbly-singlecell-atlas#atac-rna-marker","position":21},{"hierarchy":{"lvl1":"单细胞 ATAC 和 RNA 图谱注释","lvl2":"ATAC & RNA 相关性热图"},"type":"lvl2","url":"/assmbly-singlecell-atlas#atac-rna","position":22},{"hierarchy":{"lvl1":"单细胞 ATAC 和 RNA 图谱注释","lvl2":"ATAC & RNA 相关性热图"},"content":"\n\ndef _plot_correlation_heatmap(\n    rna_adata: sc.AnnData,\n    atac_adata: sc.AnnData,\n    rna_layer: Optional[str] = None,\n    atac_layer: Optional[str] = None,\n    cluster_label: str = \"cell_type\",\n    output_path: Optional[str] = None\n) -> None:\n    \"\"\"Plot a correlation heatmap between scRNA-seq and snATAC-seq.\n\n    Args:\n        rna_adata (AnnData): scRNA-seq data in AnnData format.\n        atac_adata (AnnData): snATAC-seq data in AnnData format.\n        rna_layer (Optional[str]): Layer name for scRNA-seq data (default: None).\n        atac_layer (Optional[str]): Layer name for snATAC-seq data (default: None).\n        cluster_label (str): Column name in `obs` used for grouping cell types.\n        output_path (Optional[str]): Path to save the heatmap image (default: None).\n\n    Returns:\n        None\n    \"\"\"\n    # Extract scRNA-seq data\n    rna_matrix = (\n        rna_adata.layers[rna_layer] if rna_layer else rna_adata.raw.X\n    )\n    rna_matrix = rna_matrix.toarray() if not isinstance(\n        rna_matrix, np.ndarray) else rna_matrix\n\n    rna_df = pd.DataFrame(\n        rna_matrix, index=rna_adata.obs.index, columns=rna_adata.var.index)\n    rna_df = rna_df.loc[:, rna_adata.var[\"highly_variable\"].tolist()]\n    rna_df[\"cell_type\"] = rna_adata.obs[cluster_label]\n\n    # Convert to sparse before groupby mean\n    rna_sparse = csr_matrix(rna_df.drop(columns=[\"cell_type\"]).values)\n    rna_sparse_df = pd.DataFrame.sparse.from_spmatrix(\n        rna_sparse, index=rna_df.index, columns=rna_df.drop(columns=[\"cell_type\"]).columns)\n    rna_grouped = rna_sparse_df.groupby(rna_df[\"cell_type\"]).mean()\n\n    # Convert back to dense matrix\n    rna_df = rna_grouped.T.sparse.to_dense()\n    rna_df = rna_df.apply(lambda x: (x - x.min()) / (x.max() - x.min())\n                          if x.max() != x.min() else x, axis=1).fillna(0)\n\n    # Extract snATAC-seq data\n    atac_matrix = (\n        atac_adata.layers[atac_layer] if atac_layer else atac_adata.raw.X\n    )\n    atac_matrix = atac_matrix.toarray() if not isinstance(\n        atac_matrix, np.ndarray) else atac_matrix\n\n    atac_df = pd.DataFrame(\n        atac_matrix, index=atac_adata.obs.index, columns=atac_adata.var.index)\n    atac_df[\"cell_type\"] = atac_adata.obs[cluster_label]\n\n    # ** Ensure both datasets have common features **\n    common_features = rna_adata.var.index[rna_adata.var[\"highly_variable\"]].intersection(\n        atac_df.columns)\n    rna_df = rna_df.loc[common_features]\n    atac_df = atac_df.loc[:, common_features.tolist() + [\"cell_type\"]]\n\n    # Convert to sparse before groupby mean\n    atac_sparse = csr_matrix(atac_df.drop(columns=[\"cell_type\"]).values)\n    atac_sparse_df = pd.DataFrame.sparse.from_spmatrix(\n        atac_sparse, index=atac_df.index, columns=atac_df.drop(columns=[\"cell_type\"]).columns)\n    atac_grouped = atac_sparse_df.groupby(atac_df[\"cell_type\"]).mean()\n\n    # Convert back to dense matrix\n    atac_df = atac_grouped.T.sparse.to_dense()\n    atac_df = atac_df.apply(lambda x: (\n        x - x.min()) / (x.max() - x.min()) if x.max() != x.min() else x, axis=1).fillna(0)\n\n    # Compute correlation matrix\n    correlation_matrix = pd.DataFrame(\n        np.corrcoef(rna_df, atac_df, rowvar=False)[\n            rna_df.shape[1]:, :rna_df.shape[1]],\n        index=rna_df.columns,\n        columns=atac_df.columns\n    )\n\n    # Plot heatmap\n    plt.figure(figsize=(10, 8))\n    sns.heatmap(correlation_matrix, annot=True, cmap=\"coolwarm\", cbar=True)\n    plt.title(\"\")\n    plt.xlabel(\"scRNA-seq\")\n    plt.ylabel(\"snATAC-seq\")\n    plt.tight_layout()\n\n    # Save if output path is provided\n    if output_path:\n        plt.savefig(output_path)\n\n    plt.show()\n\n_plot_correlation_heatmap(\n    rna_adata=rna_adata,\n    atac_adata=atac_gene_mat_adata,\n    rna_layer=None,\n    atac_layer=None,\n    cluster_label=\"cell_type_scglue\", \n    output_path=None\n)\n\n","type":"content","url":"/assmbly-singlecell-atlas#atac-rna","position":23},{"hierarchy":{"lvl1":"单细胞 ATAC 和 RNA 图谱注释","lvl2":"RNA 数据质量展示图"},"type":"lvl2","url":"/assmbly-singlecell-atlas#rna","position":24},{"hierarchy":{"lvl1":"单细胞 ATAC 和 RNA 图谱注释","lvl2":"RNA 数据质量展示图"},"content":"\n\numi_data = pd.DataFrame({\n    \"UMIs\": pd.concat([\n        rna_ctrl_adata.obs[\"total_counts\"],\n        rna_treat_adata.obs[\"total_counts\"]\n    ]),\n    \"Condition\": [\"WT 0 min\"] * rna_ctrl_adata.n_obs + [\"WT 5 min\"] * rna_treat_adata.n_obs\n})\n\ngene_counts_data = pd.DataFrame({\n    \"n_genes_by_counts\": pd.concat([\n        rna_ctrl_adata.obs[\"n_genes_by_counts\"],\n        rna_treat_adata.obs[\"n_genes_by_counts\"]\n    ]),\n    \"Condition\": [\"WT 0 min\"] * rna_ctrl_adata.n_obs + [\"WT 5 min\"] * rna_treat_adata.n_obs\n})\n\norganelle_pct_data = pd.DataFrame({\n    \"pct_counts_organelle\": pd.concat([\n        rna_ctrl_adata.obs[\"pct_counts_organelle\"],\n        rna_treat_adata.obs[\"pct_counts_organelle\"]\n    ]),\n    \"Condition\": [\"WT 0 min\"] * rna_ctrl_adata.n_obs + [\"WT 5 min\"] * rna_treat_adata.n_obs\n})\n\nsns.set(style=\"ticks\")\n\nfig, axes = plt.subplots(3, 1, figsize=(4, 8))\n\nsns.violinplot(\n    data=umi_data,\n    x=\"Condition\",\n    y=\"UMIs\",\n    palette=\"muted\",\n    cut=0,\n    inner=\"box\",\n    linewidth=1.5,\n    width=0.6,\n    ax=axes[0]\n)\naxes[0].set_title(\"\")\naxes[0].set_xlabel(\"\")\naxes[0].set_ylabel(\"Number of UMIs\", fontsize=12)\n\nsns.violinplot(\n    data=gene_counts_data,\n    x=\"Condition\",\n    y=\"n_genes_by_counts\",\n    palette=\"muted\",\n    cut=0,\n    inner=\"box\",\n    linewidth=1.5,\n    width=0.6,\n    ax=axes[1]\n)\naxes[1].set_title(\"\")\naxes[1].set_xlabel(\"\")\naxes[1].set_ylabel(\"Number of Genes\", fontsize=12)\n\nsns.violinplot(\n    data=organelle_pct_data,\n    x=\"Condition\",\n    y=\"pct_counts_organelle\",\n    palette=\"muted\",\n    cut=0,\n    inner=\"box\",\n    linewidth=1.5,\n    width=0.6,\n    ax=axes[2]\n)\naxes[2].set_title(\"\")\naxes[2].set_xlabel(\"\")\naxes[2].set_ylabel(\"Proportion of organelle (%)\", fontsize=12)\n\nplt.tight_layout()\nplt.show()\n\n","type":"content","url":"/assmbly-singlecell-atlas#rna","position":25},{"hierarchy":{"lvl1":"单细胞 ATAC 和 RNA 图谱注释","lvl2":"ATAC 数据质量展示图"},"type":"lvl2","url":"/assmbly-singlecell-atlas#atac","position":26},{"hierarchy":{"lvl1":"单细胞 ATAC 和 RNA 图谱注释","lvl2":"ATAC 数据质量展示图"},"content":"\n\nnum_fragments_data = pd.DataFrame({\n    \"Fragments\": pd.concat([\n        atac_ctrl_adata.obs[\"n_fragment\"],\n        atac_treat_adata.obs[\"n_fragment\"]\n    ]),\n    \"Condition\": [\"WT 0 min\"] * atac_ctrl_adata.n_obs + [\"WT 5 min\"] * atac_treat_adata.n_obs\n})\n\ntsse_data = pd.DataFrame({\n    \"Tsse\": pd.concat([\n        atac_ctrl_adata.obs[\"tsse\"],\n        atac_treat_adata.obs[\"tsse\"]\n    ]),\n    \"Condition\": [\"WT 0 min\"] * atac_ctrl_adata.n_obs + [\"WT 5 min\"] * atac_treat_adata.n_obs\n})\n\npct_peaks_data = pd.DataFrame({\n    \"Peaks\": pd.concat([\n        atac_ctrl_adata.obs[\"Peaks\"],\n        atac_treat_adata.obs[\"Peaks\"]\n    ]),\n    \"Condition\": [\"WT 0 min\"] * atac_ctrl_adata.n_obs + [\"WT 5 min\"] * atac_treat_adata.n_obs\n})\n\nsns.set(style=\"ticks\")\n\nfig, axes = plt.subplots(3, 1, figsize=(4, 8))\n\nsns.violinplot(\n    data=num_fragments_data,\n    x=\"Condition\",\n    y=\"Fragments\",\n    palette=\"muted\",\n    cut=0,\n    inner=\"box\",\n    linewidth=1.5,\n    width=0.6,\n    ax=axes[0]\n)\naxes[0].set_title(\"\")\naxes[0].set_xlabel(\"\")\naxes[0].set_ylabel(\"Number of Tn5 integrations\", fontsize=12)\n\nsns.violinplot(\n    data=tsse_data,\n    x=\"Condition\",\n    y=\"Tsse\",\n    palette=\"muted\",\n    cut=0,\n    inner=\"box\",\n    linewidth=1.5,\n    width=0.6,\n    ax=axes[1]\n)\naxes[1].set_title(\"\")\naxes[1].set_xlabel(\"\")\naxes[1].set_ylabel(\"TSS enrichment scores\", fontsize=12)\n\nsns.violinplot(\n    data=pct_peaks_data,\n    x=\"Condition\",\n    y=\"Peaks\",\n    palette=\"muted\",\n    cut=0,\n    inner=\"box\",\n    linewidth=1.5,\n    width=0.6,\n    ax=axes[2]\n)\naxes[2].set_title(\"\")\naxes[2].set_xlabel(\"\")\naxes[2].set_ylabel(\"Fraction reads in peaks (%)\", fontsize=12)\n\nplt.tight_layout()\nplt.show()","type":"content","url":"/assmbly-singlecell-atlas#atac","position":27},{"hierarchy":{"lvl1":"Introduction"},"type":"lvl1","url":"/intro","position":0},{"hierarchy":{"lvl1":"Introduction"},"content":"I am a book about ... something! Wikipedia has \n\ninformation about books: hover over the link for more information.An admonition containing a note\n\nNote\n\nBooks are usually written on paper ... But Jupyter Book can create websites!\n\nIf you sold 100 books at $10 per book, you’d have $1000 dollars according to \n\n(1). If instead you publish your Jupyter Book to the web for free, you’d have $0 dollars!An arbitrary math equationx \\times y = z\n\nSometimes when reading it is helpful to foster a tranquil environment. The image in \n\nFigure 1 would be a perfect spot!A figure of a photograph of some mountains, followed by a caption\n\n\n\nFigure 1:A photograph of some beautiful mountains to look at whilst reading.","type":"content","url":"/intro","position":1}]}